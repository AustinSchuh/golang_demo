#!/bin/bash
# Copyright (C) 2015 Peloton Technology, Inc. - All Rights Reserved
# Author: Brian Silverman <brian@peloton-tech.com>

# The bazel script calls this instead of the bazel-real binary which is
# installed next to it. This script downloads a specific version of Bazel and
# then calls that.

# Alternatively, if the environment variable BAZEL_OVERRIDE is set, that will be
# run directly (after printing a message). That is intended for testing only.

# This script operates based on the assumption that any directory of the correct
# name is a fully extracted, valid Bazel installation. It is careful to avoid
# putting an invalid directory at that name at any point.

set -e
set -u
set -o pipefail

readonly PLATFORM="$(uname -s)"

# Verify checksum after successful download
checksum() {
  local file="$1"
  local expected_checksum="$2"

  if [[ "$PLATFORM" == "Darwin" ]]; then
    local actual_sha256sum="$(shasum -a 256 "$file" | awk '{print $1}')"
  else
    local actual_sha256sum="$(sha256sum "$file" | awk '{print $1}')"
  fi

  if [[ "$actual_sha256sum" != "$expected_checksum" ]]; then
    tput setaf 1 >&2
    echo "Bazel failed sha256sum verification. \
      Expected "$expected_checksum", got "$actual_sha256sum", aborting"
    tput sgr0 >&2
    rm "$file"
    exit 1
  fi
}

if [[ -n "${BAZEL_OVERRIDE+x}" ]]; then
  tput setaf 1 >&2
  echo -n "Actually calling " >&2
  tput setaf 3 >&2
  echo "${BAZEL_OVERRIDE}" >&2
  tput sgr0 >&2
  exec "${BAZEL_OVERRIDE}" "$@"
fi

# Version to download and the expected sha256 sum.
if [[ "$PLATFORM" == "Darwin" ]]; then
  readonly VERSION="201801191342+2247e8e"
  readonly SHA256SUM="a5ade6d92de1d7d2bf718e81ee5f60d510590847ec43c84a9785aebcbc98740b"
  readonly FILENAME="bazel_${VERSION}_darwin-without-jdk.sh"
else
  readonly VERSION="201801191322+2247e8e"
  readonly SHA256SUM="5d85c4a81db9b591df74afba31a4c83b96ba65211ffce4a40ab06fc5f9df1b96"
  readonly FILENAME="bazel_${VERSION}_amd64.deb"
fi

readonly DOWNLOAD_URL="http://gerrit.peloton-tech.net/Build-Dependency-Files/${FILENAME}"
readonly DEFAULT_DOWNLOAD_DIR="$(dirname "${BASH_SOURCE[0]}")/../bazel-downloads"
readonly DOWNLOAD_DIR="${PELOTON_DOWNLOAD_DIR:-"${DEFAULT_DOWNLOAD_DIR}"}"
# A directory which changes with each Bazel version and each incompatible
# upgrade of this script.

readonly VERSION_DIR="${DOWNLOAD_DIR}/${VERSION}-v1"
readonly VERSION_BAZEL="${VERSION_DIR}/usr/bin/bazel"

# Creating might fail if another invocation is racing us.
if [[ ! -d "${DOWNLOAD_DIR}" ]]; then
  mkdir "${DOWNLOAD_DIR}" || true
fi
if [[ ! -d "${DOWNLOAD_DIR}" ]]; then
  echo "Failed to create ${DOWNLOAD_DIR}" >&2
  exit 1
fi

if [[ ! -d "${VERSION_DIR}" ]]; then
  # A temporary directory which is definitely on the same filesystem as our final
  # destination, which is important so we can atomically move it.
  # If this move is non-atomic, then a concurrent Bazel command (like the verifier
  # uses several of) could use a half-copied Bazel installation.
  TEMP_DIR="$(mktemp -d "${DOWNLOAD_DIR}/tmp.XXXXXXXXXX")"
  readonly TEMP_DIR

  ( cd "${TEMP_DIR}"

    if [[ "$PLATFORM" == "Darwin" ]]; then
      curl "${DOWNLOAD_URL}" -o "${FILENAME}" --progress-bar
      checksum "${FILENAME}" "${SHA256SUM}"
      echo "Installing Bazel version ${VERSION}..." >&2
      chmod +x "${FILENAME}"
      # BAZEL_OVERRIDE needs to be set because installation script calls bazel
      # at the end. This results in an infinite loop without the override.
      export BAZEL_OVERRIDE="$PWD/extracted/lib/bazel/bin/bazel-real"
      "./${FILENAME}" --prefix="$PWD/extracted" \
        --bin="$PWD/extracted/usr/bin" &> "dpkg.log"
    else
      wget "${DOWNLOAD_URL}" -O "${FILENAME}" --no-verbose --show-progress
      checksum "${FILENAME}" "${SHA256SUM}"
      echo "Unpacking Bazel version ${VERSION}..." >&2
      dpkg-deb --extract "${FILENAME}" "extracted" &> "dpkg.log"
    fi
  )

  touch "${TEMP_DIR}/extracted/usr/bin/bazel.bazelrc"

  # Careful: somebody else might have already done it. If they manage to make
  # the move between our check and our move, then we'll end up with a random
  # extracted directory which won't do anybody any harm. If somebody else does
  # that first, then our move will fail.
  if [[ ! -d "${VERSION_DIR}" ]]; then
    mv "${TEMP_DIR}/extracted" "${VERSION_DIR}" || true
  fi
  if [[ ! -d "${VERSION_DIR}" ]]; then
    echo "Failed to create ${VERSION_DIR}" >&2
    exit 1
  fi
  rm -rf "${TEMP_DIR}"

  if [[ "$PLATFORM" == "Darwin" ]]; then
    ln -s "${VERSION_DIR}/lib/bazel/bin/bazel-real" "${VERSION_DIR}/usr/bin/bazel-real"
  fi
  echo "Done downloading Bazel version ${VERSION}" >&2
fi

if [[ "$PLATFORM" == "Darwin" ]]; then
  source "$(dirname ${BASH_SOURCE[0]})"/mac_bazel.sh
  if ! mac_bazel_checks ; then
      echo "Mac environment not set up for bazel correctly"
      exit 1
  fi
fi

ENVIRONMENT_VARIABLES=()
ENVIRONMENT_VARIABLES+=(HOSTNAME="${HOSTNAME}")
ENVIRONMENT_VARIABLES+=(SHELL="${SHELL}")
ENVIRONMENT_VARIABLES+=(USER="${USER}")
ENVIRONMENT_VARIABLES+=(PATH="${PATH}")
ENVIRONMENT_VARIABLES+=(LANG="${LANG}")
ENVIRONMENT_VARIABLES+=(HOME="${HOME}")
ENVIRONMENT_VARIABLES+=(LOGNAME="${LOGNAME}")
ENVIRONMENT_VARIABLES+=(TERM="${TERM}")

if [[ ! -z "${DISPLAY+x}" ]]; then
  ENVIRONMENT_VARIABLES+=(DISPLAY="${DISPLAY}")
fi

if [[ ! -z "${PELOTON_BUILD_HTTP_PROXY+x}" ]]; then
  ENVIRONMENT_VARIABLES+=(HTTP_PROXY="${PELOTON_BUILD_HTTP_PROXY}")
fi

if [[ ! -z "${HERCULES_CAN_INTERFACE+x}" ]]; then
  ENVIRONMENT_VARIABLES+=(HERCULES_CAN_INTERFACE="${HERCULES_CAN_INTERFACE}")
fi

if [[ -x "${VERSION_BAZEL}-real" ]]; then
  exec -a "${VERSION_BAZEL}" env -i \
      "${ENVIRONMENT_VARIABLES[@]}" \
      "${VERSION_BAZEL}-real" "$@"
fi
if [[ -x "${VERSION_BAZEL}" ]]; then
  exec env -i \
      "${ENVIRONMENT_VARIABLES[@]}" \
      "${VERSION_BAZEL}" "$@"
fi

echo "Can't find the real bazel!" >&2
exit 1
